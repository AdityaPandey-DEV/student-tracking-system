"""
Django settings for enhanced_timetable_system project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# ALLOWED_HOSTS configuration for production
ALLOWED_HOSTS = [host.strip() for host in config('ALLOWED_HOSTS', default='localhost,127.0.0.1,*.onrender.com').split(',')]

# Add specific Render domain and common patterns
ALLOWED_HOSTS.extend([
    'smart-time-table-management-system-1.onrender.com',
    '.onrender.com',
    'smart-time-table-management-system.onrender.com', 
    'enhanced-timetable-system.onrender.com',
    'timetable-system.onrender.com'
])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local apps
    'accounts',
    'timetable',
    'ai_features',
    # Third-party apps
    'crispy_forms',
    'crispy_bootstrap5', 
    'widget_tweaks',
    'django_extensions',
    # 'phonenumber_field',
    # 'rest_framework',
    # 'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'enhanced_timetable_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'enhanced_timetable_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database Configuration
# Priority: DATABASE_URL (PostgreSQL) > MySQL > SQLite
if 'DATABASE_URL' in os.environ:
    # PostgreSQL Configuration (Render/Heroku style)
    DATABASES = {
        'default': dj_database_url.config(
            default=config('DATABASE_URL')
        )
    }
elif config('USE_MYSQL', default=False, cast=bool) or 'DB_PASSWORD' in os.environ:
    # MySQL Configuration for AlwaysData (if external access is enabled)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'adityapandey-dev_time-table',  # AlwaysData database name
            'USER': 'adityapandey-dev',
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': 'mysql-adityapandey-dev.alwaysdata.net',
            'PORT': '3306',
            'OPTIONS': {
                'charset': 'utf8mb4',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                'connect_timeout': 20,
                'read_timeout': 20,
                'write_timeout': 20,
            },
        }
    }
else:
    # Development SQLite fallback
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Session Configuration
# Extended session timeout to prevent registration session expiry
SESSION_COOKIE_AGE = 1800  # 30 minutes
SESSION_SAVE_EVERY_REQUEST = True  # Refresh session on each request


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Only add STATICFILES_DIRS if the static directory exists
if os.path.exists(os.path.join(BASE_DIR, 'static')):
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]

# Static files storage for production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Login/Logout URLs
LOGIN_URL = 'accounts:login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Crispy Forms Configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Email Configuration
# Smart email setup: Supports Gmail SMTP, SendGrid API, SendGrid SMTP, and console backend
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')

# Determine email provider from environment
EMAIL_PROVIDER = config('EMAIL_PROVIDER', default='').lower()

# Check if SendGrid API key is available (preferred method - uses HTTP API, not SMTP)
SENDGRID_API_KEY = config('SENDGRID_API_KEY', default='')

# Prefer SendGrid HTTP API over SMTP (works better on Render free tier)
if SENDGRID_API_KEY and (EMAIL_PROVIDER == 'sendgrid' or EMAIL_BACKEND == 'django.core.mail.backends.console.EmailBackend'):
    # Use SendGrid HTTP API backend (more reliable than SMTP)
    EMAIL_BACKEND = 'utils.sendgrid_backend.SendGridBackend'
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default=config('SENDGRID_FROM_EMAIL', default='noreply@example.com'))
    print("‚úÖ SendGrid HTTP API email backend configured (recommended for Render)")
elif EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    # Fallback to SMTP if explicitly configured
    if EMAIL_PROVIDER == 'sendgrid' and SENDGRID_API_KEY:
        # SendGrid SMTP Configuration (less reliable on Render free tier)
        EMAIL_HOST = config('EMAIL_HOST', default='smtp.sendgrid.net')
        EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
        EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
        EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='apikey')
        EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
        DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default=config('SENDGRID_FROM_EMAIL', default='noreply@example.com'))
        print("‚ö†Ô∏è  SendGrid SMTP configured (consider using HTTP API for better reliability)")
    else:
        # Gmail or other SMTP configuration
        EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
        EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
        EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
        EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
        EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
        DEFAULT_FROM_EMAIL = EMAIL_HOST_USER or config('DEFAULT_FROM_EMAIL', default='noreply@enhanced-timetable.com')
        
        # Validate required SMTP settings
        if not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD:
            print("‚ö†Ô∏è  SMTP backend configured but missing EMAIL_HOST_USER or EMAIL_HOST_PASSWORD")
            print("üîß Run 'python scripts/setup/setup_gmail.py' to configure Gmail SMTP")
            print("üîß Or run 'python scripts/setup/setup_sendgrid.py' to configure SendGrid (recommended for Render)")
    
    # Add timeout settings to prevent worker timeouts (if SMTP is configured)
    if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
        # Increased timeout to 30 seconds for Render free tier (network can be slow)
        EMAIL_TIMEOUT = config('EMAIL_TIMEOUT', default=30, cast=int)  # 30 seconds timeout
        EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=False, cast=bool)
    elif 'sendgrid_backend' in EMAIL_BACKEND:
        # SendGrid HTTP API - no timeout needed, uses HTTP requests
        # Set default from email
        DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default=config('SENDGRID_FROM_EMAIL', default='noreply@example.com'))
else:
    # Console backend or other
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@enhanced-timetable.local')

# OpenAI Configuration
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')

# Groq (free) AI provider configuration
GROQ_API_KEY = config('GROQ_API_KEY', default='')
GROQ_BASE_URL = config('GROQ_BASE_URL', default='https://api.groq.com/openai/v1')
GROQ_MODEL = config('GROQ_MODEL', default='llama-3.1-8b-instant')

# Twilio Configuration
TWILIO_ACCOUNT_SID = config('TWILIO_ACCOUNT_SID', default='')
TWILIO_AUTH_TOKEN = config('TWILIO_AUTH_TOKEN', default='')
TWILIO_PHONE_NUMBER = config('TWILIO_PHONE_NUMBER', default='')

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# Logging Configuration - Production Ready
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}
